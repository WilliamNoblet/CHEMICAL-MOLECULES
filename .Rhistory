showscale = FALSE
) %>%
layout(
title = '',
scene = list(
xaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
),
yaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
),
zaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
)
)
)
}, error = function(e) {
message(paste("Error rendering atom", my_i, ":", atom_data$Name[my_i], "-", e$message))
})
})
})
}
}
shinyApp(ui = ui, server = server)
ui <- shinyUI(navbarPage(id = 'navBar',
theme = 'paper.css',
collapsible = TRUE,
inverse = TRUE,
windowTitle = 'Chemical molecules',
position = 'fixed-top',
#footer = includeHTML("./www/include_footer.html"),
header = tags$style(
".navbar-right {
float: right !important;
}",
"body {padding-top: 75px;}"),
tags$head(
tags$style(
HTML('
body {
background-color: #333333; /* To change the background color. */
color: #ffffff; /* To change the font color. */
}
#comparaison_corner_off {
min-width: 500px;
min-height: 1000px;
max-width: 500px;
max-height: 1000px;
overflow-x: auto;
}
.center-content {
display: flex;
justify-content: center;
text-align: center;
font-family: "Arial", sans-serif;
font-size: 20px;
}
'
))
),
tabPanel('HOME', value = 'home',
fluidRow(
column(3),
column(6,
shiny::HTML("<br><br><center> <h1>Chemical Molecules"),
shiny::HTML("<h3>.</h3>")
),
column(3)
)
),
tabPanel('Atom',
fluidRow(column(3),
column(6,
shiny::HTML("<br><br><center> <h1>Visualization of atoms"),
shiny::HTML("<h3>.</h3>"),
shiny::HTML("<h5>.</h5>")
),
column(3)
),
fluidRow(column(2, class = "center-content", atom_data$AtomicNumber[1]),
column(2, class = "center-content", atom_data$Name[1]),
column(2, class = "center-content", atom_data$Symbol[1]),
column(2, class = "center-content", atom_data$Symbol[1]),
column(4, plotlyOutput('fig_atom'))
),
#lapply(1:nrow(atom_data), generate_atom_row)
lapply(1:nrow(atom_data), generate_atom_row)
),
tabPanel('Chemical molecules',
),
tabPanel('2',
),
tabPanel('3',
)
))
server <- function(input, output, session){
if (!require("dplyr")) install.packages("dplyr")
library(dplyr)
if (!require("plotly")) install.packages("plotly")
library(plotly)
if (!require("openxlsx")) install.packages("openxlsx")
library(openxlsx)
library(StatsBombR)
fig <- plot_ly(
x = ~sphere_mesh$x,
y = ~sphere_mesh$y,
z = ~sphere_mesh$z,
type = 'surface',
colorscale = list(c(0, paste0('#', atom_data$CPKHexColor[1])), c(1, paste0('#', atom_data$CPKHexColor[1]))),
showscale = FALSE
) %>%
layout(
title = '',
scene = list(
xaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
),
yaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
),
zaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
)
)
)
output[['fig_atom']] <- renderPlotly(fig)
for (i in 1:nrow(atom_data)) {
local({
my_i <- i
output[[paste0('fig_atom_', my_i)]] <- renderPlotly({
plot_ly(
x = ~sphere_mesh$x,
y = ~sphere_mesh$y,
z = ~sphere_mesh$z,
type = 'surface',
colorscale = list(c(0, paste0('#', atom_data$CPKHexColor[my_i])), c(1, paste0('#', atom_data$CPKHexColor[my_i]))),
showscale = FALSE
) %>%
layout(
title = '',
scene = list(
xaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
),
yaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
),
zaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
)
)
)
})
})
}
}
shinyApp(ui, server)
generate_atom_row <- function(index) {
fluidRow(
column(2, class = "center-content", atom_data$AtomicNumber[index]),
column(2, class = "center-content", atom_data$Name[index]),
column(2, class = "center-content", atom_data$Symbol[index]),
column(2, class = "center-content", atom_data$Symbol[index]),
column(4, plotlyOutput(paste0('fig_atom_', index)))
)
}
library(dplyr)
library(plotly)
library(StatsBombR)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(shinythemes)
library(dplyr)
library(stringr)
library(png)
library(shinyjs)
library(DT)
library(visNetwork)
library(rintrojs)
ui <- shinyUI(navbarPage(id = 'navBar',
theme = 'paper.css',
collapsible = TRUE,
inverse = TRUE,
windowTitle = 'Chemical molecules',
position = 'fixed-top',
#footer = includeHTML("./www/include_footer.html"),
header = tags$style(
".navbar-right {
float: right !important;
}",
"body {padding-top: 75px;}"),
tags$head(
tags$style(
HTML('
body {
background-color: #333333; /* To change the background color. */
color: #ffffff; /* To change the font color. */
}
#comparaison_corner_off {
min-width: 500px;
min-height: 1000px;
max-width: 500px;
max-height: 1000px;
overflow-x: auto;
}
.center-content {
display: flex;
justify-content: center;
align-items: center;
height: 100vh;
text-align: center;
font-family: "Arial", sans-serif;
font-size: 50px;
}
'
))
),
tabPanel('HOME', value = 'home',
fluidRow(
column(3),
column(6,
shiny::HTML("<br><br><center> <h1>Chemical Molecules"),
shiny::HTML("<h3>.</h3>")
),
column(3)
)
),
tabPanel('Atom',
fluidRow(column(3),
column(6,
shiny::HTML("<br><br><center> <h1>Visualization of atoms"),
shiny::HTML("<h3>.</h3>"),
shiny::HTML("<h5>.</h5>")
),
column(3)
),
fluidRow(column(2, class = "center-content", atom_data$AtomicNumber[1]),
column(2, class = "center-content", atom_data$Name[1]),
column(2, class = "center-content", atom_data$Symbol[1]),
column(2, class = "center-content", atom_data$Symbol[1]),
column(4, plotlyOutput('fig_atom'))
),
#lapply(1:nrow(atom_data), generate_atom_row)
lapply(1:nrow(atom_data), generate_atom_row)
),
tabPanel('Chemical molecules',
),
tabPanel('2',
),
tabPanel('3',
)
))
server <- function(input, output, session){
if (!require("dplyr")) install.packages("dplyr")
library(dplyr)
if (!require("plotly")) install.packages("plotly")
library(plotly)
if (!require("openxlsx")) install.packages("openxlsx")
library(openxlsx)
library(StatsBombR)
fig <- plot_ly(
x = ~sphere_mesh$x,
y = ~sphere_mesh$y,
z = ~sphere_mesh$z,
type = 'surface',
colorscale = list(c(0, paste0('#', atom_data$CPKHexColor[1])), c(1, paste0('#', atom_data$CPKHexColor[1]))),
showscale = FALSE
) %>%
layout(
title = '',
scene = list(
xaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
),
yaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
),
zaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
)
)
)
output[['fig_atom']] <- renderPlotly(fig)
for (i in 1:nrow(atom_data)) {
local({
my_i <- i
output[[paste0('fig_atom_', my_i)]] <- renderPlotly({
plot_ly(
x = ~sphere_mesh$x,
y = ~sphere_mesh$y,
z = ~sphere_mesh$z,
type = 'surface',
colorscale = list(c(0, paste0('#', atom_data$CPKHexColor[my_i])), c(1, paste0('#', atom_data$CPKHexColor[my_i]))),
showscale = FALSE
) %>%
layout(
title = '',
scene = list(
xaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
),
yaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
),
zaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
)
)
)
})
})
}
}
shinyApp(ui, server)
ui <- shinyUI(navbarPage(id = 'navBar',
theme = 'paper.css',
collapsible = TRUE,
inverse = TRUE,
windowTitle = 'Chemical molecules',
position = 'fixed-top',
#footer = includeHTML("./www/include_footer.html"),
header = tags$style(
".navbar-right {
float: right !important;
}",
"body {padding-top: 75px;}"),
tags$head(
tags$style(
HTML('
body {
background-color: #333333; /* To change the background color. */
color: #ffffff; /* To change the font color. */
}
#comparaison_corner_off {
min-width: 500px;
min-height: 1000px;
max-width: 500px;
max-height: 1000px;
overflow-x: auto;
}
.center-content {
display: flex;
justify-content: center;
align-items: center;
text-align: center;
font-family: "Arial", sans-serif;
font-size: 50px;
}
'
))
),
tabPanel('HOME', value = 'home',
fluidRow(
column(3),
column(6,
shiny::HTML("<br><br><center> <h1>Chemical Molecules"),
shiny::HTML("<h3>.</h3>")
),
column(3)
)
),
tabPanel('Atom',
fluidRow(column(3),
column(6,
shiny::HTML("<br><br><center> <h1>Visualization of atoms"),
shiny::HTML("<h3>.</h3>"),
shiny::HTML("<h5>.</h5>")
),
column(3)
),
fluidRow(column(2, class = "center-content", atom_data$AtomicNumber[1]),
column(2, class = "center-content", atom_data$Name[1]),
column(2, class = "center-content", atom_data$Symbol[1]),
column(2, class = "center-content", atom_data$Symbol[1]),
column(4, plotlyOutput('fig_atom'))
),
#lapply(1:nrow(atom_data), generate_atom_row)
lapply(1:nrow(atom_data), generate_atom_row)
),
tabPanel('Chemical molecules',
),
tabPanel('2',
),
tabPanel('3',
)
))
server <- function(input, output, session){
if (!require("dplyr")) install.packages("dplyr")
library(dplyr)
if (!require("plotly")) install.packages("plotly")
library(plotly)
if (!require("openxlsx")) install.packages("openxlsx")
library(openxlsx)
library(StatsBombR)
fig <- plot_ly(
x = ~sphere_mesh$x,
y = ~sphere_mesh$y,
z = ~sphere_mesh$z,
type = 'surface',
colorscale = list(c(0, paste0('#', atom_data$CPKHexColor[1])), c(1, paste0('#', atom_data$CPKHexColor[1]))),
showscale = FALSE
) %>%
layout(
title = '',
scene = list(
xaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
),
yaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
),
zaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
)
)
)
output[['fig_atom']] <- renderPlotly(fig)
for (i in 1:nrow(atom_data)) {
local({
my_i <- i
output[[paste0('fig_atom_', my_i)]] <- renderPlotly({
plot_ly(
x = ~sphere_mesh$x,
y = ~sphere_mesh$y,
z = ~sphere_mesh$z,
type = 'surface',
colorscale = list(c(0, paste0('#', atom_data$CPKHexColor[my_i])), c(1, paste0('#', atom_data$CPKHexColor[my_i]))),
showscale = FALSE
) %>%
layout(
title = '',
scene = list(
xaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
),
yaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
),
zaxis = list(
title = '',
showgrid = FALSE,
zeroline = FALSE,
visible = FALSE
)
)
)
})
})
}
}
shinyApp(ui, server)
